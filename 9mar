<mat-form-field class="mat-form-input">
  <mat-label>Parameter value</mat-label>
  <input matInput placeholder="Pattern" formControlName="parameterValue">
  <mat-hint align="start">Required</mat-hint>
</mat-form-field>




ngOnInit() {
    this.modalService.urlParameterModalComponent = this;
    this.urlParameter = this.formBuilder.group({
      parameter: ['0'],
      parameterName: [''],
      requiredParameter: ['0'],
      parameterType: ['0'],
      parameterValue: ['0']
    });
  }
  
  this.requiredParameter.setValue(data.requiredParameter);
      this.parameterType.setValue(data.parameterType);
      this.parameterValue.setValue(data.parameterValue);
  
  get parameterValue() {
    return this.urlParameter.get('parameterValue');
  }
  
  
  
  export interface SbDocumentParameter {
  parameter?: string;
  parameterName?: string;
  requiredParameter?: string;
  parameterType?: string;
  parameterValue?: string;
}




for (const path of paths) {
            const pathItem: SbDocumentParameter = {
              parameter: 'Path',
              parameterName: path['name'],
              requiredParameter: path['required'] == true || path['required'] == 'true' ? 'Yes' : 'No',
              parameterType: path['schema'] ? (path['schema']['type'] == 'string' ? 'String' : 'Integer') : path['type'],
              parameterValue: ""
            };
            sbDocument.parameters.push(pathItem);
          }

          const queries = methodObj['parameters'].filter(a => a['in'] === 'query');

          for (const query of queries) {
            const queryItem: SbDocumentParameter = {
              parameter: 'Query',
              parameterName: query['name'],
              requiredParameter: query['required'] == true || query['required'] == 'true' ? 'Yes' : 'No',
              parameterType: query['schema'] ? (query['schema']['type'] == 'string' ? 'String' : 'Integer') : query['type'],
              parameterValue: ""
            };
            sbDocument.parameters.push(queryItem);
          }
              
              
              
              
              
              
              // Core infra Config //
          let newPath =  pathObj['pathName'];
          let ismatch = false;
          if (pathObj['parameters'] && pathObj['parameters'].length) {
            pathObj['parameters'].map((param)=>{
              if (newPath.indexOf('{'+param.parameterName+'}')>-1) {
                ismatch = true;
                newPath = newPath.replace('/{'+param.parameterName+'}', param.parameterValue);
              }
            })
          }

          let nameMetod = pathObj['method'].toLowerCase();
          let namePath = pathObj['pathName'].replace('/','').split('/')[0];
          let predicate = {};
          if (!ismatch) {
            predicate['predicates'] = [
              {
                "and": [
                  {
                    "equals": {
                      "method": pathObj['method'],
                      "path": `${basePath}/${newPath}`
                    }
                  },
                  {"inject": `(config) => {\n\n config.state.configYML='lib/config/${nameMetod}-${namePath}.yml';\n config.state.apiSchema='../../../../lib/responseSchema/${nameMetod}-${namePath}-schema.js' ;\n config.state.databaseYML='lib/config/database-${namePath}.yml'; \n return true;\n}`}
                ]
              }
            ];
          } else {
            predicate['predicates'] = [
              {
                "and": [{
                  "equals": {
                    "method": pathObj['method'],
                  }},
                  {"matches":{
                      "path": `${basePath}/${newPath}`
                    }},
                  {"inject": `(config) => {\n\n config.state.configYML='lib/config/${this.getFileName(pathObj['name'], true)}';\n config.state.apiSchema='../../../../lib/responseSchema/${this.getFileName(pathObj['name'], false)}' ;\n config.state.databaseYML='lib/config/database-${namePath}.yml'; \n return true;\n}`}
                ]
              }
            ];
          }
          
          predicate['responses'] = [
            {
              "inject": "<%- stringify(filename, '/lib/core/virtualizeAPI.js') %>"
            }
          ]
